def Refine(self):
        """This method refines the circuit, by removing unnecessary wires."""
        
        # All wires that aren't connecting 2 nodes together are redundant, and should be replaced

        redundant: Element = None

        wires: list[Wire] = [  ele for ele in self.elements if ele.type == "wire" ]

        for wire in wires:
            
            connected_elements = [wire.connections["t1"], wire.connections["t2"]]

            # If the element connects 2 nodes, do nothing
            if "node" in connected_elements[0] and "node" in connected_elements[1]:
                continue

            redundant = wire
            
            break

        if not redundant:
            return True
        
        print(f"{redundant.ID} is redundant")
        print(f"Connections: {connected_elements}")

        # Identify the 2 connections, and replace
        # At this point, wires can either be connecting 2 nodes, a node and a wire, or 2 wires
        # redundant is a wire object, connecting to a wire and a node, or another wire
        
        found = 0

        for i in range(len(self.elements)):

            if found == 2:
                break

            if self.elements[i].ID in connected_elements:
                
                found += 1
                print(f"Setting Connections for {self.elements[i].ID}, {self.elements[i].connections}")
                
                # Replace value in dictionary or tuple
                if type(self.elements[i].connections) == dict: # Connected element is a wire
                                            
                    for k in self.elements[i].connections:
                        
                        v = self.elements[i].connections[k]
                        
                        if v == redundant.ID:
                            self.elements[i].connections[k] = [e for e in connected_elements if e != self.elements[i].ID][0]
                            print(self.elements[i].connections)
                
                else: # Connected element is a node
                    
                    for x in range(len(self.elements[i].connections)):
                        

                        if self.elements[i].connections[x] == redundant.ID:
                            
                            self.elements[i].connections[x] = [e for e in connected_elements if e != [self.elements[i].ID]][0]
                            
                            print(self.elements[i].connections)

        self.elements.remove(redundant)

        return self.Refine()
